# -*- coding: utf-8 -*-
"""Kakuhu Matondo Data Science and AI BNNB Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WEi9MpCWDF_qUW257Q1NyMWvGquhRfp5

# **ANALYSIS OF JESUIT CENTRE FOR THEOLOGICAL REFLECTION (JCTR) MONTHLY BASIC NEEDS AND NUTRITION BASKET (BNNB) COSTS**

Key notes:
*   Data cleaning and preprocessing done using Microsoft Excel, Google Sheets, Tabula and Akkio.
*   BNB Missing values and Outliers were replaced by annual mean values in the data cleaning and preprocessing process.
*   Libraries used in project one analysis include Pandas, NumPy, Matplotlib, Scikit-learn
*   Data was sourced from JCTR Repository https://www.jctr.org.zm/bnnb-folders.html
* Dates arecomputed at month end because that is when most of the BNNB statistics are released
"""

#Let's import the libraries we will use
import pandas as pd
import numpy as np
from datetime import datetime,timedelta
from dateutil.relativedelta import relativedelta
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score

#Let's load our clean data that we stored as a csv file
file=pd.read_csv('/content/JCTR BNNB-CleanData (1).csv')

#Create a Data Frame with our Data
Data=pd.DataFrame(file)

#Get a glimpse of our data
file.head()

"""In this project we will focus on Lusaka data ranging from Jan 1991 to December 2021"""

#Let's create a new data frame that extracts Lusaka data from the general data frame
LusakaData=pd.DataFrame(Data[Data['City'] == 'Lusaka'])

#Let's take a look at our new data :)
LusakaData.head()

#We will drop the Monthly change in BNB Data Column because it is closely related to the Total BNB Imputed Column
LusakaData=LusakaData.drop(columns='Monthly change in BNB')

#Change the data types of columns year,month, and month year to dates
LusakaData['Month-Year']=pd.to_datetime(LusakaData['Month-Year'])
LusakaData['Year']=pd.to_datetime(LusakaData['Year'])
LusakaData['Month']=pd.to_datetime(LusakaData['Month-Year'])

#Format the dates accordingly
LusakaData['Month-Year']=LusakaData['Month-Year'].dt.strftime('%b %Y')
LusakaData['Year']=pd.to_datetime(LusakaData['Month-Year']).dt.strftime('%Y')
LusakaData['Month']=pd.to_datetime(LusakaData['Month']).dt.strftime('%B')

# Check the general statistics of the Lusaka dataset rounded off to two decimal places
LusakaData.describe().round(2)

"""According to our statistics between the years 1999 and 2021:
*   The average cost of the BNB is K3005.51
*   The lowest BNB is K239.84 and the highest is K8644.50 which gives a staggering range of K8404.66
*   25% of the BNB costs were below K1114.28, 50% below K2896.18, and 75% below K4395.68






"""

#VISUALIZING OUR DATA

#Adjusting the size of our plot to desired dimensions
plt.rcParams["figure.figsize"]=(12,5)

#Creating a bar chat
plt.bar(LusakaData['Year'],LusakaData['TotalBNBImputed'],color='green')

#Creating a line plot
plt.plot(LusakaData['Year'],LusakaData['TotalBNBImputed'],color='red')

#Setting our label values
plt.title('Change in Basic Needs Basket in Lusaka from 1999 to 2021',fontweight='bold')
plt.xlabel('Year',fontweight='bold',labelpad=30)
plt.ylabel('Basic Needs Basket Cost ZMW',fontweight='bold')

#Displaying our graph
plt.show()

"""Now that we have explored the general trend over the years, we can try to get a better understanding by looking at trends every few years.
We will split our dataset into four parts each with dates between the years:

*   1999 and 2004
*   2005 and 2010
*   2011 and 2016
*   2017 and 2021

(endpoints inclusive)




"""

#LusakaData_Set1 consists of data from the years 1999, 2000, 2001, 2002, 2003, and 2004
LusakaData_Set1=LusakaData[LusakaData['Year']< '2005']

#LusakaData_Set2 consists of data from the years 2005, 2006, 2007, 2008, 2009 and 2010
LusakaData_Set2=LusakaData[(LusakaData['Year']>'2004') & (LusakaData['Year']<'2011')]

#LusakaData_Set3 consists of data from 2011, 2012, 2013, 2014, 2015 and 2016
LusakaData_Set3=LusakaData[(LusakaData['Year']>'2010') & (LusakaData['Year']<'2017')]

#LusakaData_Set4 consists of data from 2017, 2018, 2019, 2020 and 2021
LusakaData_Set4=LusakaData[LusakaData['Year']>'2016']

#Checking the trends in our first subset 1
LusakaData_Set1.describe().round(2)

"""Between the years 1999 and 2004:


*   the average monthly basic needs and nutrition basket cost is K726.04
*   the minimum monthly basic needs and nutrition basket cost is K239.84 and the maximum is K1127.50
*   25% of the data lies below K276.88, 50% below K849.88 and 75% below K1028.82
*  On average the monthly basic needs baskets exceeds or falls below the average by K344.57




"""

#Checking the trends in subset 2
LusakaData_Set2.describe().round(2)

"""Between the years 2005 and 2010:

*   the average basic needs and nutrition basket cost is K1872.96
*   the minimum basic needs and nutrition basket cost is K1331.92 and the maximum is K2897.43 growing more than double its minimum value during the period.
*   25% of the data lies below K1417.67, 50% below K1713.28 and 75% below K2229.13
*   On average the cost of the basic needs and nutrition basket falls below or goes above the mean cost by K518.53




"""

#Checking the trends in subset 3
LusakaData_Set3.describe().round(2)

"""Between the years 2011 and 2016:

* the average basic needs and nutrition basket cost is K3629.62
* the minimum basic needs and nutrition basket cost is K2904.15 and the maximum is K5036.28. Showing a near double in the BNNB.
* 25% of the data lies below K3432.66, 50% below K3580.80 and 75% below K3692.86
* On average the cost of the basic needs and nutrition basket falls below or goes above the mean cost by K571.59.

"""

#Checking the trends in our last subset
LusakaData_Set4.describe().round(2)

"""Between the years 2017 and 2021:

* the average basic needs and nutrition basket cost is K6351.01
* the minimum basic needs and nutrition basket cost is K4859.35 and the maximum is K8644.50. Also showing a near double in the BNNB
* 25% of the data lies below K5278.58, 50% below K5783.76 and 75% below K7163.56
* on average the cost of the basic needs and nutrition basket fall sbelow or goes above the mean cost by K1327.02

"""

#Visualizing these trends in our data:

fig,axs=plt.subplots(2,2,figsize=(12,10)) #Initialize our four subplots

#Create plot 1
axs[0,0].bar(LusakaData_Set1['Year'],LusakaData_Set1['TotalBNBImputed'],color='green')
axs[0,0].set(ylabel='Basic Needs and Nutrition Basket Cost')
axs[0,0].set_title('Trend Between 1999 and 2004')

#Create plot 2
axs[0,1].bar(LusakaData_Set2['Year'],LusakaData_Set2['TotalBNBImputed'],color='green')
axs[0,1].set_title('Trend Between 2005 and 2010 ')

#Create plot 3
axs[1,0].bar(LusakaData_Set3['Year'],LusakaData_Set3['TotalBNBImputed'],color='green')
axs[1,0].set(xlabel='Years',ylabel='Basic Needs and Nutrition Basket Cost')
axs[1,0].set_title('Trend Between 2011 and 2016')

#Create plot 4
axs[1,1].bar(LusakaData_Set4['Year'],LusakaData_Set4['TotalBNBImputed'],color='green')
axs[1,1].set(xlabel='Years')
axs[1,1].set_title('Trend Between 2017 and 2021')

#adjust the spacing of our plots
fig.tight_layout(pad=2)

plt.show()

"""These trends show us that in Lusaka, Zambia the cost of the BNNB reaches just below double its value ever 5-6 years.

# **Predicting BNNB cost in Lusaka using Linear Regression and Polynomial Regression**

Next we will create a model to predict future BNNB costs and measure it against actual BNNB costs for the years 2022 and 2023.The reports for the respective years can be found at https://www.jctr.org.zm/
"""

#Ensure our data is in the same date time format to facilitate model creation
LusakaData['Month-Year'] = pd.to_datetime(LusakaData['Month-Year'], format='%b %Y')

#Our target variable y which is the TotalBNBImputed that we wish to predict
y = LusakaData['TotalBNBImputed']

#Our model only accepts numerical values so we convert our dates into an array of the distance from the starting point Jan 1999 in months
X = np.array([(date - datetime(1999, 1, 1)).days // 30 for date in LusakaData['Month-Year']])

#We create our training data set and testing data set
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

# Reshape X_train and X_test to 2D arrays
X_train = X_train.reshape(-1, 1)
X_test = X_test.reshape(-1, 1)

# Linear Regression
model = LinearRegression()
#We fit our model to the training data
model.fit(X_train, y_train)

#We calcute the r square value to determine how well the linear regression approximates the actual data for the train and test sets
r_sq_train = model.score(X_train, y_train)
print(f'Train R Square Value (Linear Regression): {r_sq_train}')
r_sq_test = model.score(X_test, y_test)
print(f'Test R Square Value (Linear Regression): {r_sq_test}')

# Polynomial Regression
degree = 3
poly = PolynomialFeatures(degree=degree)
X_poly_train = poly.fit_transform(X_train)
X_poly_test = poly.transform(X_test)

model_poly = LinearRegression()
model_poly.fit(X_poly_train, y_train)
#We calcute the r square value to determine how well the polynomial regression approximates the actual data for the train and test sets
r_sq_train_poly = model_poly.score(X_poly_train, y_train)
print(f'Train R Square Value (Polynomial Regression): {r_sq_train_poly}')
r_sq_test_poly = model_poly.score(X_poly_test, y_test)
print(f'Test R Square Value (Polynomial Regression): {r_sq_test_poly}')

"""From the output we can see that:
* our linear model explains 91.2% of the training data and 91.9% of the test data
* our polynomial model explains 98.1% of the training data and 98.5% of the test data

"""

# Plotting our original values
plt.scatter(X, y, label='Actual values',color='green')
plt.xlabel('Months from Reference Date Jan 1999',fontweight='bold')
plt.ylabel('TotalBNBImputed',fontweight='bold')

# Plot Linear Regression curve
plt.plot(X, model.predict(X.reshape(-1, 1)), label='Linear Regression', color='black')

# Plot Polynomial Regression curve
X_range = np.arange(X.min(), X.max() + 1, 1).reshape(-1, 1)
X_range_poly = poly.transform(X_range)
plt.plot(X_range, model_poly.predict(X_range_poly), label=f'Polynomial Regression (Degree {degree})', color='red')

plt.legend()
plt.show()

# Making predictions
# Let's say you want to predict for a new month
#Let's give an example of January 2022
new_month = datetime(2022, 1, 31)
new_month_numeric = (new_month - datetime(1999, 1, 1)).days // 30

# Reshape to a 2D array
new_month_numeric = np.array(new_month_numeric).reshape(1, -1)

# Linear Regression prediction
linear_prediction = model.predict(new_month_numeric)
print(f'Linear Regression Prediction: {linear_prediction}')

# Polynomial Regression prediction
new_month_poly = poly.transform(new_month_numeric)
poly_prediction = model_poly.predict(new_month_poly)
print(f'Polynomial Regression Prediction: {poly_prediction}')

"""From this, we can see that our linear model predicts a cost of K6,753.06 and our Polynomial model predicts a cost of K8,605.31 for January 2022.

Next, we will make predictions for the next two years using both our models.
"""

# Making predictions for the next two years
start_date = LusakaData['Month-Year'].max() + relativedelta(months=1)
end_date = start_date + timedelta(days=365 * 2)  # Predicting for the next two years

predicted_dates = pd.date_range(start=start_date, end=end_date, freq='M')
predicted_months_numeric = [(date - datetime(1999, 1, 1)).days // 30 for date in predicted_dates]

# Reshape to a 2D array
predicted_months_numeric = np.array(predicted_months_numeric).reshape(-1, 1)

# Linear Regression predictions
linear_predictions = model.predict(predicted_months_numeric)

# Polynomial Regression predictions
predicted_months_poly = poly.transform(predicted_months_numeric)
poly_predictions = model_poly.predict(predicted_months_poly)

# Creating a DataFrame for the predictions
PredictedData = pd.DataFrame({
    'Date': predicted_dates,
    'Linear Regression Prediction': linear_predictions,
    'Polynomial Regression Prediction': poly_predictions
})

# Print and/or visualize the predictions
print(PredictedData)

# Plotting the predictions
plt.plot(LusakaData['Month-Year'], y, label='Actual values')
plt.plot(predicted_dates, linear_predictions, label='Linear Regression Prediction', linestyle='--', color='blue')
plt.plot(predicted_dates, poly_predictions, label=f'Polynomial Regression Prediction (Degree {degree})', linestyle='--', color='red')

plt.xlabel('Date',fontweight='bold')
plt.ylabel('TotalBNBImputed',fontweight='bold')
plt.legend()
plt.show()

"""Now we check the accuracy of our models using the actual BNNB Data from JCTR"""

#Import our cleaned 2022 to 2023 data
ActualData=pd.read_csv('/content/2022-2023 BNNB CleanData - Sheet1 (1).csv')


# Convert the 'Month Year' column to datetime
ActualData['Month Year'] = pd.to_datetime(ActualData['Month Year'])

# Convert the 'Month Year' column to the end of the month and format it to year-month-day
ActualData['Month Year'] = ActualData['Month Year'].dt.to_period('M').dt.to_timestamp('M').dt.strftime('%Y-%m-%d')

# Display the modified DataFrame
ActualData.head()

ActualData.describe()

"""From this we can see that :
*  average BNNB between Jan 2022 and December 2023 is K9,125.95
* the minimum BNNB cost is K8537.78 and the maximum BNNB cost is K9411.54.
* 25% of the data lies below K9,048.77 , 50% below K9,151.74 and 75% below K9,296.37
"""

DataAccuracy=pd.DataFrame()
DataAccuracy['Month-Year']=ActualData['Month Year']
DataAccuracy['Actual Values']=ActualData['TotalBNBImputed']
DataAccuracy['Linear Regression Predicted Values']=PredictedData['Linear Regression Prediction'].round(2)
DataAccuracy['Polynomial Regression Predicted Values']=PredictedData['Polynomial Regression Prediction'].round(2)
DataAccuracy['Accuracy Linear Regression']=100-((abs(DataAccuracy['Linear Regression Predicted Values']-DataAccuracy['Actual Values'])/DataAccuracy['Actual Values'])*100).round(2)
DataAccuracy['Accuracy Polynomial Regression']=100-((abs(DataAccuracy['Polynomial Regression Predicted Values']-DataAccuracy['Actual Values'])/DataAccuracy['Actual Values'])*100).round(2)

DataAccuracy

#The average accuracy of our linear model compared to actual values
DataAccuracy['Accuracy Linear Regression'].mean()

#The average accuracy of our polynomial model compared to actual values
DataAccuracy['Accuracy Polynomial Regression'].mean()

"""From this we can see that our linear model predicts the 2022 and 2023 values with an average accuracy of 77.04% and the polynomial model with average accuracy of 92.71%

# 2024 Predictions
Let us predict some 2024 values :)
"""

# Making predictions for the end of each month in the year 2024
start_date_2024 = datetime(2024, 1, 31)
end_date_2024 = datetime(2024, 12, 31)

predicted_dates_2024 = pd.date_range(start=start_date_2024, end=end_date_2024, freq='M')  # M stands for Month End
predicted_months_numeric_2024 = [(date - datetime(1999, 1, 1)).days // 30 for date in predicted_dates_2024]

# Reshape to a 2D array
predicted_months_numeric_2024 = np.array(predicted_months_numeric_2024).reshape(-1, 1)

# Linear Regression predictions for the end of each month in 2024
linear_predictions_2024 = model.predict(predicted_months_numeric_2024)

# Polynomial Regression predictions for the end of each month in 2024
predicted_months_poly_2024 = poly.transform(predicted_months_numeric_2024)
poly_predictions_2024 = model_poly.predict(predicted_months_poly_2024)

# Creating a DataFrame for the predictions
PredictionsData2024 = pd.DataFrame({
    'Date': predicted_dates_2024,
    'Linear Regression Prediction': linear_predictions_2024,
    'Polynomial Regression Prediction': poly_predictions_2024
})

# Print and visualize the predictions for 2024
print(PredictionsData2024.round(2))

# Plotting the predictions for 2024
plt.plot(predicted_dates_2024, linear_predictions_2024, label='Linear Regression Prediction', linestyle='--', color='orange')
plt.plot(predicted_dates_2024, poly_predictions_2024, label=f'Polynomial Regression Prediction (Degree {degree})', linestyle='--', color='red')

plt.xlabel('Date')
plt.ylabel('Predicted Values for 2024')
plt.legend()
plt.show()